PHP File Handling

Web - https://www.geeksforgeeks.org/php-basics-file-handling/?ref=lbp
Video - https://www.youtube.com/watch?v=_aoZuad97Ws
https://www.youtube.com/watch?v=GBp810rwN-c&list=PLu0W_9lII9aikXkRE0WxDt1vozo3hnmtR&index=36
https://www.youtube.com/watch?v=iZmBYO6tfxE&list=PLu0W_9lII9aikXkRE0WxDt1vozo3hnmtR&index=37
https://www.youtube.com/watch?v=5CYb7v-rqR8&list=PLu0W_9lII9aikXkRE0WxDt1vozo3hnmtR&index=38

Practice:

Create a json file using php and store form submission on that and make a page to show that data in a table


PHP SQl Injection Basic

1. Why Prevent JavaScript/HTML Injection?
Attackers can inject malicious scripts like <script>alert('hacked')</script>.
If this data is displayed later, it can execute as code, leading to Cross-Site Scripting (XSS) attacks.

2. How to Prevent Injection
Sanitize User Input: Use PHP functions to clean the data before saving it to the database.
htmlspecialchars(): Converts special characters like <, >, and " into harmless HTML entities.
strip_tags(): Removes all HTML and PHP tags from the input.
Use Prepared Statements: Use mysqli prepared statements to securely handle database queries.

3. Example Code (Sanitization + Prepared Statements)
php
Copy code
<?php
// Database connection
$conn = mysqli_connect("localhost", "root", "", "test_db");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get user input
$raw_comment = $_POST['comment'];

// Sanitize input
$sanitized_comment = htmlspecialchars($raw_comment, ENT_QUOTES, 'UTF-8');

// Prepare SQL statement
$sql = "INSERT INTO comments (comment) VALUES (?)";
$stmt = mysqli_prepare($conn, $sql);

// Bind parameters (s = string)
mysqli_stmt_bind_param($stmt, "s", $sanitized_comment);

// Execute statement
if (mysqli_stmt_execute($stmt)) {
    echo "Comment saved successfully!";
} else {
    echo "Error: " . mysqli_stmt_error($stmt);
}

// Close statement and connection
mysqli_stmt_close($stmt);
mysqli_close($conn);
?>


4. Using mysqli_real_escape_string()
mysqli_real_escape_string() is used to escape special characters in a string for use in SQL queries. It prevents SQL injection but doesn’t sanitize JavaScript/HTML.
Example Code:
php
Copy code
<?php
// Database connection
$conn = mysqli_connect("localhost", "root", "", "test_db");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get user input
$raw_comment = $_POST['comment'];

// Escape special characters for SQL
$escaped_comment = mysqli_real_escape_string($conn, $raw_comment);

// Insert query (dynamic query; not the safest method)
$sql = "INSERT INTO comments (comment) VALUES ('$escaped_comment')";

if (mysqli_query($conn, $sql)) {
    echo "Comment saved successfully!";
} else {
    echo "Error: " . mysqli_error($conn);
}

// Close connection
mysqli_close($conn);
?>

Limitations:
This method is not sufficient to prevent JavaScript/HTML injection.
Use it only if you cannot use prepared statements.

5. Best Practices
Always Sanitize Input:
Use htmlspecialchars() to prevent harmful scripts.
Example:

$sanitized_input = htmlspecialchars($_POST['input'], ENT_QUOTES, 'UTF-8');


Use Prepared Statements:
Avoid dynamic SQL queries.
Example:

$sql = "INSERT INTO table_name (column) VALUES (?)";
$stmt = mysqli_prepare($conn, $sql);


Avoid Relying Solely on mysqli_real_escape_string():
While it prevents SQL injection, it doesn’t protect against JavaScript/HTML injection.

6. Combined Secure Workflow
Full Example:

<?php
// Database connection
$conn = mysqli_connect("localhost", "root", "", "test_db");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get raw user input
$raw_comment = $_POST['comment'];

// Sanitize input
$sanitized_comment = htmlspecialchars($raw_comment, ENT_QUOTES, 'UTF-8');

// Use prepared statements to insert sanitized input
$sql = "INSERT INTO comments (comment) VALUES (?)";
$stmt = mysqli_prepare($conn, $sql);
mysqli_stmt_bind_param($stmt, "s", $sanitized_comment);

if (mysqli_stmt_execute($stmt)) {
    echo "Comment saved successfully!";
} else {
    echo "Error: " . mysqli_stmt_error($stmt);
}

// Close resources
mysqli_stmt_close($stmt);
mysqli_close($conn);
?>


Summary
Use htmlspecialchars() to sanitize JavaScript/HTML inputs.
Always use prepared statements to prevent SQL injection.
Avoid relying solely on mysqli_real_escape_string(), as it doesn’t sanitize JavaScript/HTML.
Video - https://www.youtube.com/watch?v=biM47F99i9A

